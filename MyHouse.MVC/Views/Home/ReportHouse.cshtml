@*@using Motel.TableSQL
@using Motel.Models
@{
    ViewBag.Dashboard = "active";
    Layout = "~/Views/Shared/_LayoutMotel.cshtml";
    List<tbl_Motel> houses = ViewBag.House;
}*@
<style>
    .table__filter__wrap .table-centered tr th, .table__filter__wrap .table-centered tr td {
        text-align: left
    }
</style>
<div class="fixed-filter sticky-top pd-b-15">
    <div class="container pd-x-0 pd-lg-x-10 pd-xl-x-0">
        <div class="d-flex align-items-center flex-wrap">
            <h4 class="mg-md-b-0 tx-spacing--1 mg-r-15">Thống kê doanh thu tiền nhà và chi phí phát sinh</h4>
            <div class="d-flex align-items-center">
                <div class="d-flex">
                    <div class="form-group mg-sm-b-0 mg-r-15 group-select">
                        <label class="mg-b-0"><i data-feather="home"></i></label>
                        <select id="ddl-house" class="form-control">
                            <option value="0">--- Tất cả ---</option>
                            @*@{
                                foreach (var item in houses)
                                {
                                    <option value="@item.ID">@item.MotelName</option>
                                }
                            }*@
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="container pd-x-0 pd-lg-x-10 pd-xl-x-0">
    <div class="row mg-t-30">
        <div class="col-12">
            <div class="card mg-b-30  rounded-0">
                <div class="card-body tx-16">
                    <div class="row">
                        <div class="col-md-6">
                            <p class="">Tổng thu tiền nhà: <strong class="tx-success" id="tong-thu">0</strong></p>
                            <p class="">Tổng chi phí: <strong class="tx-danger" id="tong-chi">0</strong></p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row align-items-sm-end">
                <div class="col-12">
                    <div class="chart-six" style="height:325px;">
                        <canvas id="js-electronic-chart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mg-t-30 table__filter__wrap">
        <div class="table-responsive table__filter-wrap">
            <div class="table-responsive">
                <table class="table table-bordered table-centered table-block-mobile" id="js-visibility-column">
                    <thead class="">
                        <tr>
                            <th class="sort-label text-left">Nhà/Dãy trọ</th>
                            <th class="sort-label text-left">Tháng</th>
                            <th class="sort-label text-left">Phòng</th>
                            <th class="sort-label text-left">Người thuê</th>
                            <th class="sort-label text-left">Chi phí phát sinh</th>
                            <th class="sort-label text-left">Số tiền <span id="p-total" style="color: #db6f93;"></span></th>
                            <th class="sort-label text-left">Ngày nhập</th>
                            <th class="sort-label text-left"></th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

<script src="~/App_Themes/HouseMona/DataTables/jquery.dataTables.min.js"></script>
<script src="~/App_Themes/HouseMona/lib/chart.js/Chart.bundle.min.js"></script>
<script src="~/App_Themes/HouseMona/lib/chart.js/chartjs-plugin-datalabels.js"></script>

<script>
    $(window).scroll(function () {
        let scrollY = $(window).scrollTop();
        console.log('scrolled');
        if (scrollY > 30) {
            $('body').addClass('remove-hd-fixed');
        } else {
            $('body').removeClass('remove-hd-fixed');
        }
    });
    var filterValues = {};
    $(document).ready(function () {
        //Chart
        //For padding between chart and legend
        Chart.Legend.prototype.afterFit = function () {
            this.height = this.height + 25;
        };
        //Random data
        function getRandom(length, min, max, currency) {
            const arr = [];
            for (let i = 0; i <= length; i++) {
                if (currency == true) {
                    arr[i] = Math.floor(Math.random() * (max - min) + min) * 1000;
                } else {
                    arr[i] = Math.floor(Math.random() * (max - min) + min);
                }
            }
            return arr;
        }
        const convertArrToFlotData = arr => {
            return arr.map((x, index) => {
                return [index, x];
            });
        }

        const currencyFormat = value => value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        var ctx1 = document.getElementById('js-electronic-chart').getContext('2d');
        const shortMonth = ['TH1', 'TH2', 'TH3', 'TH4', 'TH5', 'TH6', 'TH7', 'TH8', 'TH9', 'TH10', 'TH11', 'TH12'];
        const longMonth = ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'];
        const revenueChart = new Chart(ctx1, {
            type: 'line',
            data: {
                labels: longMonth,
                datasets: [{
                    label: 'Chi phí phát sinh',
                    //data: getRandom(12, 100, 500, false),
                    data: [],
                    backgroundColor: '#DB7093',
                    borderColor: '#DB7093',
                    borderWidth: 2,
                    fill: false
                }, {
                    label: 'Tổng thu tiền nhà',
                    //data: getRandom(12, 100, 200, false),
                    data: [],
                    backgroundColor: '#1E90FF',
                    borderColor: '#1E90FF',
                    borderWidth: 2,
                    fill: false
                }]
            },
            options: {
                maintainAspectRatio: false,
                plugins: {
                    datalabels: {
                        formatter: function (value, context) {
                            return value;
                        },
                        clamp: true,
                        align: 'top'
                    }
                },
                title: {
                    text: 'Thống kê thu, chi',
                    display: true,
                    position: 'top'
                },
                legend: {
                    display: true,
                    labels: {
                        display: true,
                        padding: 20,
                    },
                    position: 'bottom',
                },
                legendCallback: function (chart) {
                    var text = [];
                    text.push('<ul class="' + chart.id + '-legend legend-chart">');
                    for (let i = 0; i < chart.data.datasets.length; i++) {
                        text.push('<li><span class="block-color" style="background-color:' +
                            chart.data.datasets[i].backgroundColor + '"></span>');
                        if (chart.data.datasets[i].label) {
                            text.push(chart.data.datasets[i].label);
                        }
                        text.push('</li>');
                    }
                    text.push('</ul>');
                    return text.join("");
                },

                scales: {
                    xAxes: [{
                        display: true,
                        gridLines: {
                            display: false
                        },
                        barPercentage: 0.5
                    }],
                    yAxes: [{
                        gridLines: {
                            dipslay: false,
                            color: '#ebeef3'
                        },
                        ticks: {
                            fontColor: '#8392a5',
                            fontSize: 10,
                            callback: function (value, index, values) {
                                if (parseInt(value) >= 1000000 && parseInt(value) < 1000000000) {
                                    return (value / 1000000).toString().replace(
                                        /\B(?=(\d{3})+(?!\d))/g,
                                        ",") + ' Triệu';
                                } else if ((parseInt(value) >= 1000000000)) {
                                    return (value / 1000000000).toString().replace(
                                        /\B(?=(\d{3})+(?!\d))/g, ",") + ' Tỉ';
                                }
                                return value;
                            }
                        }
                    }]
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                    callbacks: {
                        label: function (tooltipItem, data) {
                            //  console.log(tooltipItem);
                            //  console.log(tooltipItem);
                            var label = data.datasets[tooltipItem.datasetIndex].label;
                            var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                            let result;
                            if (parseInt(value) >= 1000) {
                                result = label + ': ' + value.toString().replace(
                                    /\B(?=(\d{3})+(?!\d))/g, ",")
                            } else {
                                result = label + ': ' + value;
                            }
                            return result;

                        }
                    }
                },
            }
        });
        //load datatable
        var refDataTable = $("#js-visibility-column").dataTable({
            "order": [[6, "desc"]],
            serverSide: true,
            bFilter: false,
            columns: [
                { data: "House" },
                { data: "DateIn" },
                { data: "Room" },
                { data: "Renter" },
                { data: "FeeName" },
                { data: "PriceDis" },
                { data: "CreateDate" },
                { data: "LinkUrl" }
            ],
            ajax: function (data, callback, settings) {
                filterValues.draw = data.draw;
                filterValues.start = data.start;
                filterValues.length = data.length;
                filterValues.order = data.order[0].column;
                filterValues.dir = data.order[0].dir;

                $.ajax({
                    url: '/House/LoadData',
                    method: 'GET',
                    data: filterValues,
                    success: function (msg) {
                        $('#p-total').text(msg.totalcolunm);
                    },
                }).done(callback);
            },
            lengthChange: true
        });

        function pagesearchajax() {
            filterValues.House = $("#ddl-house").val();
            //filterValues.Month = $("#ddl-month-fee").val();
            //filterValues.Year = $("#ddl-year-fee").val();
            refDataTable.fnDraw();
        }

        //$('#ddl-house-fee').change(function () {
        //    pagesearchajax();
        //})
        //$('#ddl-month-fee').change(function () {
        //    pagesearchajax();
        //})
        //$('#ddl-year-fee').change(function () {
        //    pagesearchajax();
        //})
        // load chart
        loadchart()
        function loadchart() {
            $.ajax({
                type: "POST",
                url: "/Home/GetDataReporthouse",
                data: '{id: ' + $('#ddl-house').val() + '}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {
                    //barChart.data.labels = JSON.parse(msg.data).labels;
                    revenueChart.data.datasets[0].data = msg.chi;
                    revenueChart.data.datasets[1].data = msg.thu;
                    revenueChart.update();

                    $('#tong-thu').text(msg.tongthu);
                    $('#tong-chi').text(msg.tongchi);
                },
                error: function (xmlhttprequest, textstatus, errorthrow) {
                    console.log("loadchart");
                }
            });
        }
        $('#ddl-house').change(function () {
            loadchart();
            pagesearchajax();
        })
        $(document).on('click', '.delete-fee', function (e) {
            if (confirm('Xóa dòng dữ liệu này?')) {
                var id = $(this).attr('data-id');
                var tr = $(this).closest('tr');
                $.ajax({
                    type: "POST",
                    url: "/House/DeleteFeeHouse",
                    data: '{id: ' + id + '}',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        tr.remove();
                        pagesearchajax();
                    },
                    error: function (xmlhttprequest, textstatus, errorthrow) {
                        console.log("delete-fee");
                    }
                });
            }
        });
    });
</script>

